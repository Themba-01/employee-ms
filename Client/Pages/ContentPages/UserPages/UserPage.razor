@implements IDisposable
@if (allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="table-container" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Role</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (ManageUsers is not null)
                {
                    int count = 1;
                    foreach (var item in ManageUsers)
                    {
                        <tr>
                            <th scope="row">@count</th>
                            <td>@item.UserId</td>
                            <td>@item.Name</td>
                            <td>@item.Email</td>
                            <td>@item.Role</td>
                            <td>
                                <i class="bi bi-pencil text-info cursorStyle"
                                   @onclick="() => EditClicked(item)"></i>
                                <i class="bi bi-trash text-danger cursorStyle"
                                   @onclick="() => DeleteClicked(item)"></i>
                            </td>
                        </tr>
                        count++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5"><div class="alert alert-info text-center">No Branch added yet</div></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
                </div>
            </div>
        </div>
    </div>
}
<UserDialog @ref="userDialog"
              HandleSaveOperationEvent="HandleSaveOperationEvent"
              ManageUser="ManageUser"
              SystemRoles="SystemRoles"/>

<style>
    .cursorStyle{
        cursor: pointer
    }
</style>
@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();
    }

    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    

    void OpenDialog()
    {
        //Branch = new Branch(); // Reset to a new Branch before opening dialog for Add
        userDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(ManageUser manageUser)
    {
        var result = await accountService.UpdateUser(ManageUser);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }

    

    private void EditClicked(ManageUser user)
    {
        
        ManageUser = user; // Set the current branch for editing
        OpenDialog();
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {user.Name}?", "Confirm Delete?");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            await GetUsers(); // Refresh the list
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Successful operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}