@using BaseLibrary.Entities
@using Microsoft.AspNetCore.Components.Forms

<SfDialog Width="350px" IsModal="true" ShowCloseIcon="true" @bind-Visible="IsVisible">
    <DialogEvents OnOpen="OpenDialog"></DialogEvents>
    <DialogTemplates>
        <Header>@Title Town</Header>
        <Content>
            <EditForm Model="Town" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card border-success">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Id</label>
                            <input @bind="Town.Id" class="form-control" disabled />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="Town.Name" class="form-control" />
                        </div>
                        <div class="form-group mt-3 mb-3">
                            <label class="form-label">Select City</label>
                            <SfDropDownList TValue="int" TItem="City" Placeholder="Select City" DataSource="Cities" @bind-Value="Town.CityId">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" TItem="City" ValueChange="OnValueChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary float-end" type="submit">SAVE</button>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
    
</SfDialog>

@code {
    [Parameter] public Town Town { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public EventCallback<Town> HandleSaveOperationEvent { get; set; }
    private bool IsVisible { get; set; } = false;
    public string Title { get; set; } = "Add";

    public async Task OpenDialog()
    {
        IsVisible = true;
        await ForceLoadCity();
        StateHasChanged();
    }
    async Task ForceLoadCity()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    async Task Save()
    {
        Console.WriteLine($"Town.Name: {Town.Name}, CityId: {Town.CityId}");
        if (string.IsNullOrEmpty(Town.Name) || Town.CityId <= 0)
        {
            Console.WriteLine("Save method called");
            await dialogService.AlertAsync("You need to provide the Town name and select a City.", "Alert!");
        }
        else
        {
            await HandleSaveOperationEvent.InvokeAsync(Town);
            Town = new Town();
            IsVisible = true;
            StateHasChanged();
        }
    }

    public void ChangeTitle(string title)
    {
        Title = title;
    }

    private void OnValueChange(ChangeEventArgs<int, City> args)
    {
        Console.WriteLine($"Selected CityId: {args.Value}");
        Town.CityId = args.Value;
    }
}