@inject AllState allState

@if (allState.ShowCity)
{
    <div class="city-header">
        <h4 class="float-start">City</h4>
        <button class="btn btn-outline-success float-end" @onclick="OpenDialog">
            <i class="bi bi-plus-circle-dotted"></i> Add City
        </button>
    </div>

    <div class="table-container" style="max-height:580px; overflow-x:hidden; overflow-y:scroll;">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Id</th>
                    <th scope="col">City</th>
                    <th scope="col">Country</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Cities is not null)
                {
                    int count = 1;
                    foreach (var item in Cities)
                    {
                        <tr>
                            <th scope="row">@count</th>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td>@(item.Country?.Name ?? "Not Assigned")</td>
                            <td>
                                <i class="bi bi-pencil text-info cursorStyle"
                                   @onclick="() => EditClicked(item)"></i>
                                <i class="bi bi-trash text-danger cursorStyle"
                                   @onclick="() => DeleteClicked(item)"></i>
                            </td>
                        </tr>
                        count++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5"><div class="alert alert-info text-center">No City added yet</div></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<CityDialog @ref="cityDialog"
            HandleSaveOperationEvent="HandleSaveOperationEvent"
            City="City"
            Countries="Countries"/>

<style>
    .cursorStyle{
        cursor: pointer
    }
</style>

@code {
    CityDialog? cityDialog;
    City City = new();
    public string Title { get; set; } = "Add";
    public List<City> Cities { get; set; } = new();
    public List<Country> Countries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
    }

    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    void OpenDialog()
    {
        City = new City(); // Reset to a new City before opening dialog for Add
        cityDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(City city)
    {
        bool successCheck = false;
        if (city.Id > 0) // Use the parameter 'city' for consistency
        {
            var result = await cityService.Update(city, Constants.CityBaseUrl);
            successCheck = await HandleResponse(result);
        }
        else
        {
            var response = await cityService.Insert(city, Constants.CityBaseUrl);
            successCheck = await HandleResponse(response);
        }
        if (successCheck)
        {
            await GetCities(); // Refresh list after successful operation
            cityDialog?.ChangeTitle("Add"); // Reset title for next operation
        }
    }

    private async Task<bool> HandleResponse(GeneralResponse response)
    {
        if (response.Flag)
        {
            await dialogService.AlertAsync(response.Message, "Successful operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(response.Message, "Error");
            return false;
        }
    }

    private void EditClicked(City city)
    {
        Title = "Update"; 
        City = city; // Set the current city for editing
        cityDialog?.OpenDialog();
    }

    private async Task DeleteClicked(City city)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {city.Name}?", "Confirm Delete?");
        if (!confirm) return;

        var response = await cityService.DeleteById(city.Id, Constants.CityBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetCities(); // Refresh the list
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Successful operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}